<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  ~ Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~ WSO2 Inc. licenses this file to you under the Apache License,
  ~ Version 2.0 (the "License"); you may not use this file except
  ~ in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied.  See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  -->
<domain name="PasswordRotationPolicyNotifications">
    <description>Password Rotation Policy Notifications</description>
    <scenarios>
        <scenario type="ConfigurePasswordExpiry">
            <description>Expire Passwords based on the last password change time</description>
            <templates>
                <template type="realtime">
                    <![CDATA[
/* Enter a unique ExecutionPlan */
@Plan:name('Password Expiry')

/* Enter a unique description for ExecutionPlan */
@Plan:description('ExecutionPlan for Password Expiry')

/* define streams/tables and write queries here ... */

@Import('org.wso2.carbon.identity.policy.password.PasswordChanges:1.0.0')
define stream passwordChangesStream (tenantID int, userStoreDomain string, username string, email string, timestamp long);

@Export('org.wso2.carbon.identity.policy.password.ExpiredPasswords:1.0.0')
define stream expiredPasswordsStream (tenantID int, userStoreDomain string, username string, email string);

--@From(eventtable='rdbms', datasource.name='AnalyticsDataSource', table.name='PasswordChangesTable')
define table passwordChangesTable (tenantID int, userStoreDomain string, username string, email string, timestamp long);

define trigger dailyTrigger at every $expiredPasswordCheckIntervalInDays day;

from passwordChangesStream
insert overwrite passwordChangesTable
	on passwordChangesTable.tenantID == tenantID
		and passwordChangesTable.userStoreDomain == userStoreDomain
		and passwordChangesTable.username == username;

from dailyTrigger#window.length(1) join passwordChangesTable
select tenantID, userStoreDomain, username, email
having (dailyTrigger.triggered_time - timestamp) > $passwordExpiryInDays day
    and (dailyTrigger.triggered_time - timestamp) < ($passwordExpiryInDays day + $expiredPasswordCheckIntervalInDays day)
    and not (email is null)
insert into expiredPasswordsStream;
                	]]>
                </template>
            </templates>
            <parameters>
                <parameter name="expiredPasswordCheckIntervalInDays" type="int">
                    <displayName>Expired password check interval in days</displayName>
                    <description>The interval between two expired password check password delays</description>
                    <defaultValue>1</defaultValue>
                </parameter>
                <parameter name="passwordExpiryInDays" type="int">
                    <displayName>Time to expire passwords in days</displayName>
                    <description>The time to expire passwords in days</description>
                    <defaultValue>30</defaultValue>
                </parameter>
            </parameters>
        </scenario>
    </scenarios>
</domain>